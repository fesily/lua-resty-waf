---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by apple.
--- DateTime: 2022/5/12 14:14
---
local json = require "cjson"
---@type LuaFileSystem
local lfs = require 'lfs'

---@class SecrulesTestCase
---@field resource string
---@field filename string
---@field output string
---@field type 'op'|'tfn'
---@field ret integer
---@field obtained integer
---@field skipped integer
---@field obtainedOutput string
---@field param string
---@field name string
---@field input string


local function json_re_cb(s)
    local num  = tonumber(s[1], 16)
    if not num then return s[1] end
    return string.char(num)
end

local function json2bin(str)
    local re = "\\\\x([a-z0-9A-Z]{2})";
    local re2 = "\\\\u([a-z0-9A-Z]{4})";
    local new_str = ngx.re.gsub(str, re, json_re_cb, "oj")

    return ngx.re.gsub(new_str, re2, json_re_cb, "oj")
end
---@return SecrulesTestCase[] | nil
local function load_test_from_file(file)
    local f = io.open(file, "r")
    if f then
        ---@type SecrulesTestCase[]
        local tests = json.decode(f:read("*a"))
        for _, value in ipairs(tests) do
            value.input = json2bin(value.input)
            value.output = json2bin(value.output)
        end
        return tests
    end
end

local function get_all_files(dir)
    local files = {}
    local n = 1;
    for file in lfs.dir(dir) do
        file = dir .. file
        if lfs.attributes(file, "mode") == "file" then
            if file:find(".json") then
                files[n] = file
                n = n + 1
            end
        end
    end
    return files
end


local dir = "/Users/apple/apisix/lua-resty-waf/"
local waf = require "resty.waf":new()
local translate = require "resty.waf.translate"
local util = require "resty.waf.util"
local ctx = { id = 1 }
describe("op", function()
    local op = require "resty.waf.operators"

    local files = get_all_files(dir .. "test-cases/secrules-language-tests/operators/")
    assert.not_nil(files)
    for _, file in ipairs({}) do
        local unittests = load_test_from_file(file)
        for _, unittest in ipairs(unittests or {}) do
            ---@cast unittest SecrulesTestCase

            local name = file:match([[([%a%d]+).json$]])
            it(name, function()
                assert.is_equal(unittest.type, 'op')

                local translation = {}
                translate.translate_operator({ operator = {
                    operator = unittest.name,
                    pattern = unittest.param
                } }, translation, dir)
                local i = tonumber(unittest.input)
                if i then
                    unittest.input = i
                end
                local match = op.lookup[translation.operator](waf, unittest.input, translation.pattern, ctx)
                assert.is_equal(unittest.ret == 1, match)
            end)
        end
    end
end)


local function in_list(table,v)
    for key, value in ipairs(table) do
        if v:find(value) then
            return true
        end
    end
end

describe('transform', function()
    local transform = require("resty.waf.transform")
    local skips = {
        "base64DecodeExt",
        "phpArgsNames",
        "parityZero7bit",
        "parityOdd7bit",
        "parityEven7bit",
    }

    ---@type string[]
    local files = get_all_files(dir .. "test-cases/secrules-language-tests/transformations/")
    assert.not_nil(files)
    for _, file in ipairs(files) do
        if in_list(skips, file) then goto continue1 end
        local unittests = load_test_from_file(file)
        for i, unittest in ipairs(unittests or {}) do
            ---@cast unittest SecrulesTestCase
            assert.is_equal(unittest.type, 'tfn')
            unittest.name = unittest.name:lower()
            local unittest_name = translate.valid_transforms[unittest.name]
            local name = file:match([[([%a%d]+).json$]])
            assert(name)
            if not unittest_name then
                print("not support " .. unittest.name)
                goto continue
            end
            it(name .. " " .. i, function()
                ---@type string
                local output = transform.lookup[unittest_name](waf, unittest.input)
                if type(output) == 'number' and type(unittest.output) == 'string' then
                    output = tostring(output)
                end
                if unittest.output:byte(#unittest.output) ~= 0 then
                    assert.not_equal(output:byte(#output),0)
                end
                assert.is_equal(output, unittest.output)
            end)
            ::continue::
        end
        ::continue1::
    end
end)
